import streamlit as st
import tensorflow as tf
from tensorflow.keras.preprocessing import image
import numpy as np
from PIL import Image

model = tf.keras.models.load_model('model/savePointAnimals.h5')

class_labels = [
    'Beetle', 'Butterfly', 'Cat', 'Cow', 'Dog', 'Elephant', 'Gorilla', 'Hippo', 'Lizard', 'Monkey', 'Mouse', 'Panda', 'Spider', 'Tiger', 'Zebra'
]

class_to_emoji = {
    'Beetle': 'üêû',
    'Butterfly': 'ü¶ã',
    'Cat': 'üê±',
    'Cow': 'üêÑ',
    'Dog': 'üê∂',
    'Elephant': 'üêò',
    'Gorilla': 'ü¶ç',
    'Hippo': 'ü¶õ',
    'Lizard': 'ü¶é',
    'Monkey': 'üêí',
    'Mouse': 'üê≠',
    'Panda': 'üêº',
    'Spider': 'üï∑Ô∏è',
    'Tiger': 'üêØ',
    'Zebra': 'ü¶ì',
}

def predict_image(_img):
    if _img.mode != 'RGB': # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô RGB ‡∏ú‡∏°‡πÄ‡∏à‡∏≠‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏µ type alpha (RGBA)
        _img = _img.convert('RGB')

    _img = _img.resize((256, 256))  # scale input ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö model
    img_array = np.array(_img) / 255.0  # [0, 1] pixel
    img_array = np.expand_dims(img_array, axis=0)  # dimension batch

    prediction = model.predict(img_array)  # ‡πÄ‡∏≠‡∏≤‡πÉ‡∏™ model
    predicted_class_idx = np.argmax(prediction)  # ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ max //class ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
    predicted_class = class_labels[predicted_class_idx]  # index(int) class => class
    confidence = prediction[0][predicted_class_idx]  # score

    return predicted_class, confidence

st.write("# Animal Species Classifier")
st.sidebar.write("# ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
uploaded_file = st.sidebar.file_uploader("", type=["jpg", "jpeg", "png"])

if uploaded_file is None:
    st.image('https://placehold.co/600x200/transparent/FFFFFF?text=Image', caption="‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", use_container_width=True)
    st.sidebar.warning('‡πÇ‡∏õ‡∏£‡∏î upload ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‚ö†Ô∏è', icon="‚òùÔ∏è")
    d, e = st.columns(2)
    d.metric("class", "???", border=True)
    e.metric("confidence", "???", border=True)

else:
    try:
        img = Image.open(uploaded_file)
        a, b, c = st.columns(3)
        with b:
            with st.spinner('model ‡∏Å‡∏≥‡∏•‡∏±‡∏á predict...'):
                st.image(img, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏±‡∏ï‡∏ß‡πå :)")

        predicted_class, confidence = predict_image(img)
        if confidence < 0.3:
            color = "red"
        elif confidence < 0.5:
            color = "orange"
        else:
            color = "green"

        emoji = class_to_emoji.get(predicted_class,"")

        f, g = st.columns(2)
        f.metric("class", f"{predicted_class} {emoji}", border=True)
        g.metric("confidence", f"{confidence*100}", border=True)
        st.write(f"# ü§ñ Model ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô :green[{predicted_class}] ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à :{color}[{confidence * 100:.2f}%] {emoji}")
        st.balloons()
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {e}")

st.sidebar.write('''## Model ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå 15 ‡∏ä‡∏ô‡∏¥‡∏î           
    - Beetle
    - Butterfly
    - Cat
    - Cow
    - Dog
    - Elephant
    - Gorilla
    - Hippo
    - Lizard
    - Monkey
    - Mouse
    - Panda
    - Spider
    - Tiger
    - Zebra
''')